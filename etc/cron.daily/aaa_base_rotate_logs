#!/bin/sh
#
#
# rotate_logs. This script was split off cron.daily.
# Please add your local changes to cron.daily.local
# since this file will be overwritten, when updating your system.
#
# Copyright (c) 1996-2000 SuSE GmbH Nuernberg, Germany.   
#
# please send bugfixes or comments to feedback@suse.de.
#
# Author: Burchard Steinbild <bs@suse.de>, 1996
#         Florian La Roche <florian@suse.de>, 1996
#

#
# paranoia settings
#
umask 022

PATH=/sbin:/bin:/usr/sbin:/usr/bin
export PATH

#
# get information from /etc/rc.config
#
if [ -f /etc/rc.config ] ; then
    . /etc/rc.config
fi

test "$MAX_DAYS_FOR_LOG_FILES" -gt 0 2> /dev/null || MAX_DAYS_FOR_LOG_FILES=0
export MAX_DAYS_FOR_LOG_FILES

#
# this function checks log files. It has four parameters: 
# file name, size, access rights, ownership
#
check_log_file () {
    local BACKUP_CREATED=false

    rm -f "$1".o

    test -f "$1" && \
    find "$1" -size $2 \
        -exec echo "$1 was $2" \; \
        -exec rm -f "$1".o \; \
        -exec cp "$1" "$1".o \; \
        -exec cp /dev/null "$1" \; \
        -exec chmod $3 "$1" "$1.o" \; \
        -exec chown $4 "$1" "$1.o" \; 

    test -f "$1" && {
        chmod $3 "$1"
        chown $4 "$1"
    }

    if test -f "$1".o; then
        if test -n "$5" ; then
          if test -x /sbin/init.d/$5 ; then
            /sbin/init.d/$5 reload
          fi
        fi
        echo -n "Saving file "

        DATESTRING=`date +"%Y%m%d"`

        NEWNAME="$1"-$DATESTRING
        NUMBER=2
        while [ -e $NEWNAME -o -e $NEWNAME.gz ] ; do
            NEWNAME="$1"-$DATESTRING-$NUMBER
            NUMBER=`expr $NUMBER + 1`
        done
        mv "$1".o $NEWNAME
        gzip -9 $NEWNAME

        echo "to $NEWNAME.gz"
        BACKUP_CREATED=true
    fi

    #
    # now check for old files...
    #
    if [ "$MAX_DAYS_FOR_LOG_FILES" -gt 0 ] ; then
        find "$1"-*.gz -mtime +$MAX_DAYS_FOR_LOG_FILES -type f -print0 2> /dev/null | \
            xargs --no-run-if-empty --max-lines=200 --null -- rm -f 
    fi

    if test "$BACKUP_CREATED" = true ; then
        echo "The following backup(s) do exist now:"
        ls -l "$1"-[0-9]*
        echo
	df -k .
	echo
    fi
}


#
# First check file sizes of log files.
#
if test "$MAX_DAYS_FOR_LOG_FILES" -gt 0 -a -f /etc/logfiles ; then
    while read FILES SIZE MODE OWNERSHIP RSERVICE REST ; do
        case "$FILES" in
          \#*|"") 
            continue
          ;;
        esac
        test -n "$REST" -o -z "$OWNERSHIP" && {
            echo invalid line in /etc/logfiles:
            echo "    \"$FILES $SIZE $MODE $OWNERSHIP $RSERVICE $REST\""
            echo skipping it...
            continue
        }
        for FILE in $FILES ; do
            test -f $FILE && \
                check_log_file $FILE $SIZE $MODE $OWNERSHIP $RSERVICE
        done
	RSERVICE=""
    done < /etc/logfiles
fi


exit 0
