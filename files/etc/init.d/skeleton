#! /bin/sh
# Copyright (c) 1995-2002 SuSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# Author: Kurt Garloff <feedback@suse.de>
#
# /etc/init.d/FOO
#
#   and its symbolic link
#
# /(usr/)sbin/rcFOO
#
# LSB compliant service control script; see http://www.linuxbase.org/spec/
# 
# System startup script for some example service or daemon FOO (template)
#
### BEGIN INIT INFO
# Provides:          FOO
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: FOO XYZ daemon
# Description:       Start FOO to allow XY and provide YZ
#	continued on second line by '#<TAB>'
#	should contain enough info for the runlevel editor
#	to give admin some idea what this service does and
#	what it's needed for ...
### END INIT INFO
# 
# Any extensions to the keywords given above should be preceeded by 
# X-SuSE- according to LSB.
# 
# Notes on Required-Start: 
# (a) It does specify the init script ordering,
#     not real dependencies. Dependencies have to be handled by admin
#     resp. the configuration tools (s)he uses.
#     This might be changed and the X-SuSE-Should-Start/-Stop keyword
#     be implemented as replacement for the ordering. Required-Start/Stop
#     then could be used for real (hard) dependencies.
# (b) You can use names of services (contents of their provides section)
#     or pseudo names starting with a $. The following ones are available
#     according to LSB (1.1):
#	$local_fs		all local file systems are mounted
#	$network		low level networking (eth card, ...)
#	$named			hostname resolution available
#	$remote_fs		all remote file systems are mounted
#				(note that /usr may be remote!)
#	$syslog			system logging facility up
#	$netdaemons		all network daemons are running
#     More pseudo-names for services are in planning:
#	$time			the system time has been set correctly	
#	$portmap		SunRPC portmapper available
#     The $netdaemons pseudo service is deprecated (may be removed from LSB).
#     For now, SuSE still offers it for backward compatibility.
#	$ALL			indicates that a script should be inserted
#				at the end (SuSE extension)
#

# Source LSB init functions
# providing start_daemon, killproc, pidofproc, 
# log_success_msg, log_failure_msg and log_warning_msg.
#. /lib/lsb/init-functions

# Source SuSE config (if still necessary, most info has been moved)
test -r /etc/rc.config && . /etc/rc.config

# Check for missing binaries (stale symlinks should not happen)
FOO_BIN=/usr/sbin/FOO
test -x $FOO_BIN || exit 5

# Check for existence of needed config file and read it
FOO_CONFIG=/etc/sysconfig/FOO
test -r $FOO_CONFIG || exit 6
. $FOO_CONFIG

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
#      rc_active	checks whether a service is activated by symlinks
#      rc_splash arg    sets the boot splash screen to arg (if active)
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privileges
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
	echo -n "Starting FOO"
	## Start daemon with startproc(8). If this fails
	## the echo return value is set appropriate.

	# NOTE: startproc returns 0, even if service is 
	# already running to match LSB spec.
	startproc $FOO_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    stop)
	echo -n "Shutting down FOO"
	## Stop daemon with killproc(8) and if this fails
	## set echo the echo return value.

	killproc -TERM $FOO_BIN

	# Remember status and be verbose
	rc_status -v
	;;
    try-restart)
	## Do a restart only if the service was active before.
	## Note: try-restart is not (yet) part of LSB (as of 0.7.5)
	$0 status >/dev/null &&  $0 restart

	# Remember status and be quiet
	rc_status
	;;
    restart)
	## Stop the service and regardless of whether it was
	## running or not, start it again.
	$0 stop
	$0 start

	# Remember status and be quiet
	rc_status
	;;
    force-reload)
	## Signal the daemon to reload its config. Most daemons
	## do this on signal 1 (SIGHUP).
	## If it does not support it, restart.

	echo -n "Reload service FOO"
	## if it supports it:
	killproc -HUP $FOO_BIN
	#touch /var/run/FOO.pid
	rc_status -v

	## Otherwise:
	#$0 stop  &&  $0 start
	#rc_status
	;;
    reload)
	## Like force-reload, but if daemon does not support
	## signaling, do nothing (!)

	# If it supports signaling:
	echo -n "Reload service FOO"
	killproc -HUP $FOO_BIN
	#touch /var/run/FOO.pid
	rc_status -v
	
	## Otherwise if it does not support reload:
	#rc_failed 3
	#rc_status -v
	;;
    status)
	echo -n "Checking for service FOO: "
	## Check status with checkproc(8), if process is running
	## checkproc will return with exit status 0.

	# Return value is slightly different for the status command:
	# 0 - service running
	# 1 - service dead, but /var/run/  pid  file exists
	# 2 - service dead, but /var/lock/ lock file exists
	# 3 - service not running
	# 4 - service status unknown :-(

	# NOTE: checkproc returns LSB compliant status values.
	checkproc $FOO_BIN
	rc_status -v
	;;
    probe)
	## Optional: Probe for the necessity of a reload,
	## print out the argument which is required for a reload.

	test /etc/FOO/FOO.conf -nt /var/run/FOO.pid && echo reload
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
	exit 1
	;;
esac
rc_exit
