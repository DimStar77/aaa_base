#! /bin/sh
# Copyright (c) 1996-2007 SuSE Linux Products GmbH, Nuernberg, Germany.
# All rights reserved.
#
# Author: Florian La Roche, 1996
#	  Werner Fink <werner@suse.de>, 1996-2001
#
# Please send feedback to http://www.suse.de/feedback
#
# /etc/init.d/halt (and symlinked to reboot)
#

. /etc/rc.status
. /etc/sysconfig/boot
. /etc/sysconfig/shutdown

test -s /etc/sysconfig/bootsplash && . /etc/sysconfig/bootsplash
test -e /proc/splash || SPLASH="no"

#
# Avoid being interrupted by child or keyboard
#
trap "echo" SIGINT SIGSEGV SIGQUIT SIGTERM
set +e

case "${0##*/}" in
    *halt)
	message="The system will be halted immediately."
	arch=$(/bin/uname -m)
	opts=""
	command="halt"
	#
	# Sysvinit's shutdown is knowning about the option -P and -H to set
	# the environment variable INIT_HALT within init for the runlevel 0.
	# If this variable is not set we use the system default.
	#
	if test -z "$INIT_HALT" ; then
	    case "$HALT" in
	    [Pp]*) INIT_HALT=POWEROFF ;;
	    [Hh]*) INIT_HALT=HALT     ;;
	    *)
		INIT_HALT=POWEROFF
		#
		# Check this if valid for AMD/Intel based systems
		#
		case "$arch" in
		i?86|x86_64)
		    if test -e /proc/apm -o -e /proc/acpi -o -e /proc/sys/acpi ; then
			INIT_HALT=POWEROFF
		    else
		    	INIT_HALT=HALT
			read -t 2 cmdline < /proc/cmdline
			case "$cmdline" in
			*apm=smp-power-off*|*apm=power-off*) INIT_HALT=POWEROFF
			esac
		    fi
		esac
	    esac
	fi
	#
	# The manual page of shutdown utilizes POWEROFF whereas in
	# the code the word POWERDOWN shows up for the option -P.
	#
	case "$INIT_HALT" in
	POWEROFF|POWERDOWN)
	    opts="${opts:+$opts }-p"
	esac
	#
	# Sometimes wake-on-lan isn't wanted, if so stop network
	#
	if test "$HALT_NETWORK" = "yes" ; then
	    opts="${opts:+$opts }-i"
	fi
	#
	# Sometimes it is wanted to stop also the disks, but
	# do not do this for software raids.
	#
	if test "$HALT_DISKS" = "yes" ; then
	    while read line ; do
		case "$line" in
		md*active) HALT_DISKS=no; break
		esac
	    done < /proc/mdstat
	    test "$HALT_DISKS" = "no" || opts="${opts:+$opts }-h"
	fi
	;;
    *reboot)
	message="Please stand by while rebooting the system..."
	opts="-i"
	command="reboot"
	;;
    *)
	echo "$0: call me as \"halt\" or \"reboot\" please!"
	exit 1
	;;
esac

#
# first do local stuff
#
rc_reset
if test -e /etc/init.d/halt.local ; then
    echo Running /etc/init.d/halt.local
    /bin/sh /etc/init.d/halt.local
    rc_status -v1 -r
fi

# write to wtmp file before unmounting /var
$command -w 

# set a flag that we had success upto this point
test -w / && > /success

# give processes in front a chance to quit
hupon=""
for tty in tty1 tty2 tty3 tty4 tty5 tty6; do
    test -w /dev/$tty || continue
    test -c /dev/$tty || continue
    > /dev/$tty > /dev/null 2>&1 || continue
    hupon="${hupon:+$hupon }/dev/$tty"
done
test -z "$hupon" || fuser -sk -HUP $hupon

test -s /etc/init.d/.depend.halt  || RUN_PARALLEL="no"
type -p startpar &> /dev/null     || RUN_PARALLEL="no"
startpar -v      &> /dev/null     || RUN_PARALLEL="no"

#
# set back system boot configuration
#
if test "$RUN_PARALLEL" = "yes" ; then

    startopt="-p4 -t 30 -T 3"
    eval $(startpar $startopt -M halt)
    unset failed_service skipped_service

elif -d /etc/init.d/boot.d/ ; then

    #
    # call modules in boot.d via K* symlinks
    #

    for link in /etc/init.d/boot.d/K[0-9][0-9]*; do
	test -x $link || continue
	$link stop
    done
    unset link

fi

# kill splash animation
test "$SPLASH" = yes && /sbin/splash -q

echo "Sending all processes the TERM signal..."
killall5 -15
echo -e "$rc_done_up"

# wait between last SIGTERM and the next SIGKILL
rc_wait /sbin/blogd /sbin/splash

echo "Sending all processes the KILL signal..."
killall5 -9
echo -e "$rc_done_up"

if test -n "$REDIRECT" && /sbin/checkproc /sbin/blogd ; then
    # redirect our famous last messages to default console
    exec 0<> $REDIRECT 1>&0 2>&0
fi

# on umsdos fs this would lead to an error message, so direct errors to
# /dev/null
mount -no remount,ro / 2> /dev/null
sync

# show "the system is down" message
test "$SPLASH" = yes && /sbin/splash -q -p 65535 -t "isdown"

# we do not really unmount /proc any more since halt(8) might need it
#umount -anvt proc

# Make reboot noise and wait a few seconds to give harddisks the chance
# to really flush their buffers before power goes down.
if test -n "$REDIRECT" ; then
    case "$HALT_SOUND" in
    "yes"|"quint")
	echo -en "\033[10;393]\a\033[10;262]"
	;;
    "octave")
	for tone in 524 491 440 393 349 328 295 262; do
	    echo -en "\033[10;${tone}]\a"
	    usleep 125000
	done
	echo -en "\033[10;262]"
	;;
    "no")
	;;
    *)
    	echo -en "\033[10;440]\a"
	usleep 250000
	;;
    esac
else
    test "$HALT_SOUND" = "no" || echo -en "\a"
fi
echo $message
test "$HALT_SOUND" = "no" || echo -en "\a"

test -n "$HALT_POWERDOWN_INSERT" && $HALT_POWERDOWN_INSERT

# Set system console back to intial value
test -n "$REDIRECT" -a -n "$CONSOLE" && setconsole $REDIRECT < $CONSOLE

# Test if we should boot into the new kernel
if test "$command" = "reboot" -a -x /sbin/kexec -a -f /sys/kernel/kexec_loaded ; then
    read -t 2 loaded < /sys/kernel/kexec_loaded
    if test "$loaded" = "1" ; then
	echo -n "Loaded kernel image found, executing ... "
	/sbin/kexec --exec
	echo "${warn}failed, doing normal reboot${norm}"
    fi
fi

# Now talk to kernel
exec $command -d -f -n $opts
