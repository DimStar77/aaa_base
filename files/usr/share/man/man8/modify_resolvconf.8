'\" t
.\" ** The above line should force tbl to be a preprocessor **
.\" Man page for modify_resolvconf
.\"
.\" Copyright (C), 2001
.\"
.\" You may distribute under the terms of the GNU General Public
.\" License as specified in the file COPYING that comes with the
.\" man_db distribution.
.\"
.\" Wed Apr  4 17:36:33 CEST 2001 Peter Poeml (poeml@suse.de)
.\" Fri Sep 21 07:08:22 CEST 2001 Christian Zoz (zoz@suse.de)
.\" 
.TH modify_resolvconf 8 "Thu Mar 15 2001" "0.1" "modify_resolvconf"
.SH NAME
modify_resolvconf \- modify /etc/resolv.conf
.SH SYNOPSIS
.\" 
.\"                   The general command line
.\" 
.\" \fBmodify_resolvconf\fP
.\" .IR action
.\" .IR options
.\"                   Detailed Synopsis
.LP
\fBmodify_resolvconf\fP
.IR modify
.B \-s \fI<service>\fP \-t \fI<text>\fP\||\fI-\fP [ \-p \fI<process>\fP ] [ \-i \fI<pid>\fP ] [ \-f \fI<filename of script>\fP ] [ \-e \fI<extension>\fP ] [ \-l \fI<list of search domains>\fP \||\ \-d \fI<domainname>\fP ] [ \-n \fI<list of nameservers>\fP ] [ \-a \fI<filename>\fP ] [ \-o \fI<filename>\fP ] [ \-\-resolv ] [ \-\-named ] [ \-\-no_restart ] [ \-v ] [ \-q ]
.\" 
.LP
\fBmodify_resolvconf\fP
.IR restore
.B \-s \fI<service>\fP [ \-e \fI<extension>\fP ] [ \-n \fIshow\fP ] [ \-o \fI<filename>\fP ] [ \-k ] [ \-\-resolv ] [ \-\-named ] [ \-\-no_restart ] [ \-v ] [ \-q ]
.\" 
.LP
\fBmodify_resolvconf\fP
.IR cleanup
.B [ \-n \fIshow\tP ] [ \-o \fI<filename>\fP ] [ \-k ] [ \-\-resolv ] [ \-\-named ] [ \-\-no_restart ] [ \-v ] [ \-q ]
.\" 
.LP
\fBmodify_resolvconf\fP
.IR check
.B [ \-\-resolv ] [ \-\-named ] [ \-v ] [ \-q ]
.\" 
.LP
\fBmodify_resolvconf\fP
.B \-h, \-\-help
.\" 
.\"                    DESCRIPTION
.\" 
.SH DESCRIPTION
.B modify_resolvconf
can be used by programs that have to change \fI/etc/resolv.conf\fP or
\fI/etc/named.conf\fP dynamically (temporarily). It provides a means to do that
in a consistent way accross the system. The idea is to
.TP
\- make a backup
that can be restored later. Therefore, a fixed naming scheme is used (see
below). Every modification creates a new backup. These will be restored correctly even if it happens in another sequence. If a service crashes, there is a way to clean up stale modification and to restore the original configuration.
.TP
\- add an informational header
to the new configuration file that informs the user (or other programs) that is was changed temporarily, who changed
the file, why it was done and how to avoid it in the future. This header is
automatically created by
.B modify_resolvconf
and is therefore standardized. It is just the presence of this header what marks it as temporarily modified.
.\" This again allows certain programs (e.g. YaST) to handle a temporary \fI/etc/resolv.conf\fP (\fI/etc/named.conf\fP).
.TP
\- trigger needed actions
like restarting named if \fI/etc/named.conf\fP was changed or copy a modified \fI/etc/resolv.conf\fP
to postfix's chroot environment.
.PP
It is recommended to make use of
.B modify_resolvconf
in every script that modifies \fI/etc/resolv.conf\fP or \fI/etc/named.conf\fP temporarily. It should not be used to write a definitive version of these files (e.g. by YaST or some installation tool). 

The naming scheme used for backup copies is:

.B /etc/resolv.conf.saved.by.<service name>.<extension>

where
.B service name
is one of e.g. dhclient, dhcpcd, pppd, ipppd, pcmcia, hotplug (these are the major candidates) and
.B
private extension
might optionally be used by the service itself if it modifies twice, e.g. for different interfaces.

This naming scheme allows restoring \fI/etc/resolv.conf\fP at boottime after a crash of the
system or at starttime of the service (after a crash of the service).

.B modify_resolvconf
can be controlled with two variables in SuSE's \fI/etc/rc.config\fP. With
\fBMODIFY_RESOLV_CONF_DYNAMICALLY\fP you can allow/disallow dynamic changes to
\fI/etc/resolv.conf\fP. If you like \fI/etc/named.conf\fP to be modified instead, then set
\fBMODIFY_NAMED_CONF_DYNAMICALLY\fP to yes. Since it makes not much sense to write the same nameservers to both files \fBMODIFY_NAMED_CONF_DYNAMICALLY\fP
has a higher priority then \fBMODIFY_RESOLV_CONF_DYNAMICALLY\fP. 

Programs which use 
.B modify_resolvconf
don't need to respect these variables. They should call 
.B modify_resolvconf
just always.

.\"
.\"                ACTIONS
.\"
.SH ACTIONS
.TP
.B modify
write a new \fI/etc/resolv.conf\fP or \fI/etc/named.conf\fP with the supplied data and create a backup of the old one.
.TP
.B restore
take a backup of the given service (if it exists) and restore it to the
modified file. This might be \fI/etc/resolv.conf\fP or \fI/etc/named.conf\fP itself or another
backup which was made in between by any other service. E.g. pcmcia modified
\fI/etc/resolv.conf\fP for an ethernet interface and after that ppp modifies it again for
a modem connection. If you then eject the pcmcia card but keep the modem
connection, the backup made by pcmcia will be restored to the backup made by
ppp and leave the \fI/etc/resolv.conf\fP or \fI/etc/named.conf\fP modified by ppp untouched.
.br
If no extension was given it will remove all other backups of the given service (resolv.conf.saved.by.<service>*).
.TP
.B cleanup
remove all backups of \fI/etc/resolv.conf\fP and \fI/etc/named.conf\fP while trying to restore the
original ones. It does so for both \fI/etc/resolv.conf\fP and \fI/etc/named.conf\fP independently of
the settings of the rc.config variables. If you want to clean up only for one
of these then use the
.B --resolv 
or
.B --named 
option.
.TP
.B check
return 0 if \fI/etc/resolv.conf\fP has not been modified dynamically and write a status
message to stderr. If \fI/etc/resolv.conf\fP has been modified dynamically, it returns 1
and echoes the text contained in the Info: tag to stderr.
br.
Note that it always
checks \fI/etc/resolv.conf\fP independently of the settings of the rc.config variables. If
you want to check \fI/etc/named.conf\fP then use
.B --named
. This behavior is necessary,
because in certain situations you are interested in the state of exactly one of
these configuration files. E.g. if YaST wants to set new definitive values to \fI/etc/resolv.conf\fP, it has to check if \fI/etc/resolv.conf\fP is modified currently and is not interested if \fI/etc/named.conf\fP was changed even if
\fBMODIFY_NAMED_CONF_DYNAMICALLY\fP was set.
.\" 
.\"                    OPTIONS
.\" 
.SH OPTIONS
.TP
.B \-s, \-\-service \fI<service>
name of the service that requests the modification. This will used for the name of the backup, and it is put into the Modified_by tag of the info header (see example below).
.TP
.B \-e, \-\-extension \fI<string>
appends an additional extension to the backup filename (this can be used by a service to create more than one backup like for different ppp devices)
.TP
.B \-p, \-\-process \fI<process>
name of the daemon that causes the modification (if applicable)
.TP
.B \-i, \-\-pid \fI<pid>
process ID of the daemon that causes the modification (if applicable)
.TP
.B \-f, \-\-script \fI<filename>
some script is used by the daemon to request the modification
.TP
.B \-t, \-\-text \fI<text>
a text written to the informational header that explains why the change was done and how to prevent it in the future. If \fI-\fP is given as \fI<text>\fP, the text is read from stdin.
.TP
.B \-l, \-\-searchlist \fI<list of search domains>
specifies a list of domains, separated by spaces and protected by quotes, to be written to \fI/etc/resolv.conf\fP as searchlist
.TP
.B \-d, \-\-domain \fI<domainname>
the domain to be used
.TP
.B \-n, \-\-nameservers \fI<list of nameservers>
the (space separated and quoted if necessary) list of nameservers to be used
.TP
.B \-o, \-\-save_now \fI<filename>
saves the current \fI/etc/resolv.conf\fP (\fI/etc/named.conf\fP) to the specified file. This may be used if you are interested in the modification after restore or cleanup. Alternatively you can use
.B --save_later 
when modifying.
.TP
.B \-a, \-\-save_later \fI<filename>
inserts an additional tag into the informational header specifying a filename to use for an backup of the modified configuration file to be done at restore time. Alternatively you can use
.B --save_now
when restoring or cleaning up.
.TP
.B \-k, \-\-keep
if used with restore or cleanup it keeps the current (modified) resolver settings.
.TP
.B \-\-resolv
restores, cleans up or checks \fI/etc/resolv.conf\fP independently of the settings of the rc.config variables. This variable is ignored with 'modify'.
.TP
.B \-\-named
restores, cleans up or checks \fI/etc/named.conf\fP independently of the settings of the rc.config variables. This variable is ignored with 'modify'.
.TP
.B \-\-no_restart
does not trigger any actions like restarting named or copying \fI/etc/resolv.conf\fP to the chroot environment of postfix.
.TP
.B \-v, \-\-verbose
be verbose
.TP
.B \-h, \-\-help
show synopsis
.\" 
.\"                    EXAMPLE
.\" 
.SH EXAMPLE
This is an example for the \fI/etc/resolv.conf\fP that
.B modify_resolvconf 
would create:

### BEGIN INFO
.br
#
.br
# Modified_by:  dhcpcd
.br
# Backup:       /etc/resolv.conf.saved.by.dhclient
.br
# Process:      /sbin/dhcpcd
.br
# Process_id:   12345
.br
# Script:
.br
#
.br
# Info:         blabla
.br
#               ...
.br
#
.br
### END INFO
.br
search suse.de
.br
nameserver 10.10.0.1
.br
nameserver 10.10.0.2
.br

.LP
.\"
.\"                FILES
.\"
.SH FILES
.TP
.I /etc/resolv.conf
.\"
.\"                BUGS
.\"
.SH BUGS
.br
save_later does not work properly if restoring one \fI/etc/resolv.conf\fP out of a stack of backups.
.br
Currently modify_resolvconf is dog slow, but this will be enhanced in further versions.
.\"
.\"                SEE ALSO
.\"
.SH "SEE ALSO"
.BR resolv.conf(5), named,conf(5)
.\"
.\"                AUTHOR
.\"
.SH AUTHOR
.br
Christian Zoz <zoz@suse.de>
.br
Manual page by Peter Poeml <poeml@suse.de> and Christian Zoz <zoz@suse.de>.
