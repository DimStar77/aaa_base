#!/bin/bash

if [ -e /usr/lib/YaST/.configured2 ] ; then
    find /usr/lib/YaST/.configured2 -ctime +2 | xargs --no-run-if-empty -- rm -f
fi

if [ ! -e /usr/lib/YaST/.configured2 -a -w /tmp ] ; then

    test -x /sbin/init.d/syslog && /sbin/init.d/syslog start

    touch /usr/lib/YaST/.configured2

    for i in /usr/info/ \
             /usr/lib/info/ \
             /usr/local/info/ \
             /usr/local/lib/info/ \
             /usr/X11R6/info/ \
             /usr/X11R6/lib/info/ \
             /usr/X11R6/lib/xemacs/info/ \
             /var/adm/packages ; do
        test -d $i && touch $i 2> /dev/null
    done

    test -e /etc/rc.config && . /etc/rc.config

    echo_welcome_g () {
    echo "------------------------------------------------------------------------------"
    echo " "
    echo "                        Willkommen zu S.u.S.E. Linux"
    echo " "
    }

    echo_welcome_e () {
    echo "------------------------------------------------------------------------------"
    echo " "
    echo "                        Welcome to S.u.S.E. Linux"
    echo " "
    }

    echo_passwd_g () {
    echo "    Als erstes sollten Sie ein Passwort für den Benutzer root vergeben. "
    echo "    Wenn Sie kein Passwort möchten, geben Sie einfach RETURN ein."
    echo " "
    }

    echo_passwd_e () {
    echo "    You should set a password for root first. If you don't want a password "
    echo "    for root, simply hit enter. "
    echo " "
    }

    echo_todo_g () {
    echo "------------------------------------------------------------------------------"
    echo " "
    echo "    Vermutlich muß YaST noch einige Dinge konfigurieren, wir starten"
    echo "    einfach mal ;-)"
    echo " "
    }

    echo_todo_e () {
    echo "------------------------------------------------------------------------------"
    echo " "
    echo "    Probably YaST has to configure some things, so we simply start it ;-) "
    echo " "
    }

    echo_please_wait_g () {
    echo "------------------------------------------------------------------------------"
    echo " "
    echo " Nun müssen noch einige Skripte laufen. Diese werden in etwa einer"
    echo " Minute automatisch gestartet.  Eine Logdatei finden Sie dann unter"
    echo " /var/log/Config.bootup.  Außerdem können Sie die Ausgaben auf"
    echo " Console 9 beobachten."
    echo " Sie können das System jetzt bereits normal benutzen. Wenn Sie "
    echo " das System herunterfahren, bevor die Skripte beendet sind, werden "
    echo " sie beim nächsten Hochlauf nochmal gestartet."
    echo " "
    }

    echo_please_wait_e () {
    echo " "
    echo "------------------------------------------------------------------------------"
    echo " "
    echo " Now scripts have to be started.  They will be started in one"
    echo " minute.  You can find a log file under /var/log/Config.bootup."
    echo " It will also be printed on console 9."
    echo " You can now already use your system. If you shut down the system "
    echo " before the scripts are finished, they are executed again at the "    
    echo " next system startup."
    echo " "
    }

    press_enter ()
    {
    if test "$LANGUAGE" = "german" ; then
        echo -n " Bitte <RETURN> drücken..."
    elif test "$LANGUAGE" = "english" ; then
        echo -n " Press <RETURN> to continue..."
    else
        echo " Press <RETURN> to continue..."
        echo -n " Bitte <RETURN> drücken..."
    fi
    read < /dev/tty
    }


    echo " "
    echo " "

    if test "$LANGUAGE" = "german" ; then
        echo_welcome_g
    elif test "$LANGUAGE" = "english" ; then
        echo_welcome_e
    else
        echo_welcome_e
    fi

    echo "------------------------------------------------------------------------------"
    echo " "
    
    PASSWD=`grep ^root: /etc/shadow | cut -d ":" -f 2`
    if test -z "$PASSWD" ; then
        if test "$LANGUAGE" = "german" ; then
            echo_passwd_g
        elif test "$LANGUAGE" = "english" ; then
            echo_passwd_e
        else
            echo_passwd_e
        fi

        passwd
    fi

    echo " "
    echo " "

    if test "$LANGUAGE" = "german" ; then
        echo_todo_g
    elif test "$LANGUAGE" = "english" ; then
        echo_todo_e
    else
        echo_todo_e
    fi

    echo "------------------------------------------------------------------------------"
    echo " "

    for i in /usr/info /usr/man /usr/X11R6/man /usr/openwin/man \
             /usr/lib/perl5/man /usr/lib/teTeX/man /usr/local/man ; do
        if [ ! -e /usr/lib/YaST/.DemoMode -a -d $i ] ; then
            find $i -follow -type d 2> /dev/null | xargs touch 2> /dev/null
        fi
    done

    # there was a bug in former releases of ps.tgz - a unreadable /etc/psdevtab
    # can be there - this can be deleted. Recreate it simply with calling
    # ps as root.  This procedure speeds up ps very much...
    test -e /etc/psdevtab && rm -f /etc/psdevtab
    ps > /dev/null 2> /dev/null

    #
    # PCMCIA might be needed to install additional packages.
    # So we start cardmanager if it exists.
    #
    # ATTENTION! After finishing YaST, we need to shut down cardmanager.
    # Otherwise system might hang when cardmanager is started on regular
    # bootup.
    #               hm, 11.06.1997
    
    test -x /sbin/init.d/pcmcia && /sbin/init.d/pcmcia start

    sleep 1
    /sbin/yast --nomenu

    test -x /sbin/init.d/pcmcia && /sbin/init.d/pcmcia stop

    echo " "
    echo " "
    echo " "
    echo " "
    clear

    /sbin/SuSEconfig -quick

    if test "$LANGUAGE" = "german" ; then
        echo_please_wait_g
    elif test "$LANGUAGE" = "english" ; then
        echo_please_wait_e
    else
        echo_please_wait_e
    fi

    sleep 3

    stty sane -tostop
    (
        exec 0<> /dev/null 1>&0 2>&0
        /usr/bin/setsid  /lib/YaST/bootsetup.conf
        exit 0
    ) &

    export -f press_enter 
    export LANGUAGE

    ( press_enter; touch /tmp/return.$$ ) &
    ENTER_SHELL=$!
    while [ ! -f /tmp/return.$$ -a -f /usr/lib/YaST/.configured2 ]
    do
        sleep 1
    done
    echo
    rm -f /tmp/return.$$
    disown $ENTER_SHELL 2>/dev/null
    kill $ENTER_SHELL 2>/dev/null

    echo " "
    echo "            Have a lot of fun!"
    echo " "
    echo " "
    echo "                              Your S.u.S.E. Team"
    echo " "
    echo " "
    echo " "

    exit 0
fi

